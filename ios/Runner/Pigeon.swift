// Autogenerated from Pigeon (v3.2.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
import Flutter

/// Generated class from Pigeon.

/// Generated class from Pigeon that represents data sent in messages.
struct YmodemRequest {
  var current: Int32? = nil
  var total: Int32? = nil
  var data: [Any?]? = nil
  var msg: String? = nil

  static func fromMap(_ map: [String: Any?]) -> YmodemRequest? {
    let current = map["current"] as? Int32 
    let total = map["total"] as? Int32 
    let data = map["data"] as? [Any?] 
    let msg = map["msg"] as? String 

    return YmodemRequest(
      current: current,
      total: total,
      data: data,
      msg: msg
    )
  }
  func toMap() -> [String: Any?] {
    return [
      "current": current,
      "total": total,
      "data": data,
      "msg": msg
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct YmodemResponse {
  var status: String? = nil
  var operate: String? = nil
  var filename: String? = nil
  var filepath: String? = nil
  var stop: Bool? = nil
  var start: Bool? = nil

  static func fromMap(_ map: [String: Any?]) -> YmodemResponse? {
    let status = map["status"] as? String 
    let operate = map["operate"] as? String 
    let filename = map["filename"] as? String 
    let filepath = map["filepath"] as? String 
    let stop = map["stop"] as? Bool 
    let start = map["start"] as? Bool 

    return YmodemResponse(
      status: status,
      operate: operate,
      filename: filename,
      filepath: filepath,
      stop: stop,
      start: start
    )
  }
  func toMap() -> [String: Any?] {
    return [
      "status": status,
      "operate": operate,
      "filename": filename,
      "filepath": filepath,
      "stop": stop,
      "start": start
    ]
  }
}
private class YmodemRequestApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return YmodemRequest.fromMap(self.readValue() as! [String: Any])      
      case 129:
        return YmodemResponse.fromMap(self.readValue() as! [String: Any])      
      default:
        return super.readValue(ofType: type)
      
    }
  }
}
private class YmodemRequestApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? YmodemRequest {
      super.writeByte(128)
      super.writeValue(value.toMap())
    } else if let value = value as? YmodemResponse {
      super.writeByte(129)
      super.writeValue(value.toMap())
    } else {
      super.writeValue(value)
    }
  }
}

private class YmodemRequestApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return YmodemRequestApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return YmodemRequestApiCodecWriter(data: data)
  }
}

class YmodemRequestApiCodec: FlutterStandardMessageCodec {
  static let shared = YmodemRequestApiCodec(readerWriter: YmodemRequestApiCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol YmodemRequestApi {
  func getMessage(params: YmodemResponse) -> YmodemRequest
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class YmodemRequestApiSetup {
  /// The codec used by YmodemRequestApi.
  static var codec: FlutterStandardMessageCodec { YmodemRequestApiCodec.shared }
  /// Sets up an instance of `YmodemRequestApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: YmodemRequestApi?) {
    let getMessageChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.YmodemRequestApi.getMessage", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getMessageChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let paramsArg = args[0] as! YmodemResponse
        let result = api.getMessage(params: paramsArg)
        reply(wrapResult(result))
      }
    } else {
      getMessageChannel.setMessageHandler(nil)
    }
  }
}

private func wrapResult(_ result: Any?) -> [String: Any?] {
  return ["result": result]
}

private func wrapError(_ error: FlutterError) -> [String: Any?] {
  return [
    "error": [
      "code": error.code,
      "message": error.message,
      "details": error.details
    ]
  ]
}
