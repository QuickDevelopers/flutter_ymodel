// Autogenerated from Pigeon (v3.2.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "pigeon.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString *, id> *wrapResult(id result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
        @"code": (error.code ?: [NSNull null]),
        @"message": (error.message ?: [NSNull null]),
        @"details": (error.details ?: [NSNull null]),
        };
  }
  return @{
      @"result": (result ?: [NSNull null]),
      @"error": errorDict,
      };
}
static id GetNullableObject(NSDictionary* dict, id key) {
  id result = dict[key];
  return (result == [NSNull null]) ? nil : result;
}
static id GetNullableObjectAtIndex(NSArray* array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}


@interface YmodemRequest ()
+ (YmodemRequest *)fromMap:(NSDictionary *)dict;
+ (nullable YmodemRequest *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface YmodemResponse ()
+ (YmodemResponse *)fromMap:(NSDictionary *)dict;
+ (nullable YmodemResponse *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end

@implementation YmodemRequest
+ (instancetype)makeWithCurrent:(nullable NSNumber *)current
    total:(nullable NSNumber *)total
    data:(nullable NSArray *)data
    msg:(nullable NSString *)msg {
  YmodemRequest* pigeonResult = [[YmodemRequest alloc] init];
  pigeonResult.current = current;
  pigeonResult.total = total;
  pigeonResult.data = data;
  pigeonResult.msg = msg;
  return pigeonResult;
}
+ (YmodemRequest *)fromMap:(NSDictionary *)dict {
  YmodemRequest *pigeonResult = [[YmodemRequest alloc] init];
  pigeonResult.current = GetNullableObject(dict, @"current");
  pigeonResult.total = GetNullableObject(dict, @"total");
  pigeonResult.data = GetNullableObject(dict, @"data");
  pigeonResult.msg = GetNullableObject(dict, @"msg");
  return pigeonResult;
}
+ (nullable YmodemRequest *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [YmodemRequest fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"current" : (self.current ?: [NSNull null]),
    @"total" : (self.total ?: [NSNull null]),
    @"data" : (self.data ?: [NSNull null]),
    @"msg" : (self.msg ?: [NSNull null]),
  };
}
@end

@implementation YmodemResponse
+ (instancetype)makeWithStatus:(nullable NSString *)status
    operate:(nullable NSString *)operate
    filename:(nullable NSString *)filename
    filepath:(nullable NSString *)filepath
    stop:(nullable NSNumber *)stop
    start:(nullable NSNumber *)start {
  YmodemResponse* pigeonResult = [[YmodemResponse alloc] init];
  pigeonResult.status = status;
  pigeonResult.operate = operate;
  pigeonResult.filename = filename;
  pigeonResult.filepath = filepath;
  pigeonResult.stop = stop;
  pigeonResult.start = start;
  return pigeonResult;
}
+ (YmodemResponse *)fromMap:(NSDictionary *)dict {
  YmodemResponse *pigeonResult = [[YmodemResponse alloc] init];
  pigeonResult.status = GetNullableObject(dict, @"status");
  pigeonResult.operate = GetNullableObject(dict, @"operate");
  pigeonResult.filename = GetNullableObject(dict, @"filename");
  pigeonResult.filepath = GetNullableObject(dict, @"filepath");
  pigeonResult.stop = GetNullableObject(dict, @"stop");
  pigeonResult.start = GetNullableObject(dict, @"start");
  return pigeonResult;
}
+ (nullable YmodemResponse *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [YmodemResponse fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"status" : (self.status ?: [NSNull null]),
    @"operate" : (self.operate ?: [NSNull null]),
    @"filename" : (self.filename ?: [NSNull null]),
    @"filepath" : (self.filepath ?: [NSNull null]),
    @"stop" : (self.stop ?: [NSNull null]),
    @"start" : (self.start ?: [NSNull null]),
  };
}
@end

@interface YmodemRequestApiCodecReader : FlutterStandardReader
@end
@implementation YmodemRequestApiCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [YmodemRequest fromMap:[self readValue]];
    
    case 129:     
      return [YmodemResponse fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface YmodemRequestApiCodecWriter : FlutterStandardWriter
@end
@implementation YmodemRequestApiCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[YmodemRequest class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YmodemResponse class]]) {
    [self writeByte:129];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface YmodemRequestApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation YmodemRequestApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[YmodemRequestApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[YmodemRequestApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *YmodemRequestApiGetCodec() {
  static dispatch_once_t sPred = 0;
  static FlutterStandardMessageCodec *sSharedObject = nil;
  dispatch_once(&sPred, ^{
    YmodemRequestApiCodecReaderWriter *readerWriter = [[YmodemRequestApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}


void YmodemRequestApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<YmodemRequestApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.YmodemRequestApi.getMessage"
        binaryMessenger:binaryMessenger
        codec:YmodemRequestApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getMessageParams:error:)], @"YmodemRequestApi api (%@) doesn't respond to @selector(getMessageParams:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        YmodemResponse *arg_params = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        YmodemRequest *output = [api getMessageParams:arg_params error:&error];
        callback(wrapResult(output, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
