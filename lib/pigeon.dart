// Autogenerated from Pigeon (v3.2.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import
import 'dart:async';
import 'dart:typed_data' show Uint8List, Int32List, Int64List, Float64List;

import 'package:flutter/foundation.dart' show WriteBuffer, ReadBuffer;
import 'package:flutter/services.dart';

class YmodemRequest {
  YmodemRequest({
    this.current,
    this.total,
    this.data,
    this.msg,
  });

  int? current;
  int? total;
  List<Object?>? data;
  String? msg;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['current'] = current;
    pigeonMap['total'] = total;
    pigeonMap['data'] = data;
    pigeonMap['msg'] = msg;
    return pigeonMap;
  }

  static YmodemRequest decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return YmodemRequest(
      current: pigeonMap['current'] as int?,
      total: pigeonMap['total'] as int?,
      data: pigeonMap['data'] as List<Object?>?,
      msg: pigeonMap['msg'] as String?,
    );
  }
}

class YmodemResponse {
  YmodemResponse({
    this.status,
    this.operate,
    this.filename,
    this.filepath,
    this.stop,
    this.start,
  });

  String? status;
  String? operate;
  String? filename;
  String? filepath;
  bool? stop;
  bool? start;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['status'] = status;
    pigeonMap['operate'] = operate;
    pigeonMap['filename'] = filename;
    pigeonMap['filepath'] = filepath;
    pigeonMap['stop'] = stop;
    pigeonMap['start'] = start;
    return pigeonMap;
  }

  static YmodemResponse decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return YmodemResponse(
      status: pigeonMap['status'] as String?,
      operate: pigeonMap['operate'] as String?,
      filename: pigeonMap['filename'] as String?,
      filepath: pigeonMap['filepath'] as String?,
      stop: pigeonMap['stop'] as bool?,
      start: pigeonMap['start'] as bool?,
    );
  }
}

class _YmodemRequestApiCodec extends StandardMessageCodec {
  const _YmodemRequestApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is YmodemRequest) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else 
    if (value is YmodemResponse) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else 
{
      super.writeValue(buffer, value);
    }
  }
  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:       
        return YmodemRequest.decode(readValue(buffer)!);
      
      case 129:       
        return YmodemResponse.decode(readValue(buffer)!);
      
      default:      
        return super.readValueOfType(type, buffer);
      
    }
  }
}

class YmodemRequestApi {
  /// Constructor for [YmodemRequestApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  YmodemRequestApi({BinaryMessenger? binaryMessenger}) : _binaryMessenger = binaryMessenger;

  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _YmodemRequestApiCodec();

  Future<YmodemRequest> getMessage(YmodemResponse arg_params) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.YmodemRequestApi.getMessage', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_params]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as YmodemRequest?)!;
    }
  }
}
